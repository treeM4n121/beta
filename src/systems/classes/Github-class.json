{
  "name": "Github-class",
  "master": false,
  "version": "1.0.0",
  "description": "",
  "schemas": {
    "13bdf1ff1815d7c": {
      "_id": "13bdf1ff1815d7c",
      "_name": "Github",
      "_inherit": ["_Component"],
      "refresh": "method",
      "push": "method",
      "merge": "method"
    }
  },
  "models": {
    "1c23c1ed49186e9": {
      "_id": "1c23c1ed49186e9",
      "_name": "Github",
      "refresh": {},
      "push": {
        "params": [
          {
            "name": "comment",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "createHTML",
            "type": "boolean",
            "mandatory": false,
            "default": false
          },
          {
            "name": "createNode",
            "type": "boolean",
            "mandatory": false,
            "default": false
          },
          {
            "name": "logLevel",
            "type": "string",
            "mandatory": false,
            "default": "debug"
          },
          {
            "name": "createPackage",
            "type": "boolean",
            "mandatory": false,
            "default": false
          }
        ]
      },
      "merge": {
        "params": [
          { "name": "sys", "type": "object", "mandatory": true, "default": {} }
        ]
      }
    }
  },
  "behaviors": {
    "1c2e3132fd18c75": {
      "_id": "1c2e3132fd18c75",
      "component": "Github",
      "state": "refresh",
      "action": "function refresh() {\n  var config = {},\n    gh = null,\n    userName = '',\n    repository = '';\n\n  config = this.require('storage').get('system-designer-config');\n  if (config && config.githubToken && config.githubRepository) {\n\n    gh = new GitHub({\n      token: atob(config.githubToken)\n    });\n\n    userName = config.githubRepository.split('/')[0];\n    repository = config.githubRepository.split('/')[1];\n\n    repo = gh.getRepo(userName, repository);\n\n    repo.getContents('master', '', 'raw')\n      .then(function (contents) {\n        contents.data.forEach(function (item) {\n          if (item.type === 'file' && item.name.indexOf('.json') !== -1) {\n            repo.getContents('master', item.name, 'raw')\n              .then(function (content) {\n                var system = content.data,\n                  systems = runtime.require('storage').get('system-designer-systems'),\n                  sys = null,\n                  sysStorage = null;\n\n                // check valid system\n                if (\n                  (Object.keys(system).indexOf('schemas') !== -1) &&\n                  (Object.keys(system).indexOf('models') !== -1) &&\n                  (Object.keys(system).indexOf('behaviors') !== -1) &&\n                  (Object.keys(system).indexOf('types') !== -1) &&\n                  (Object.keys(system).indexOf('components') !== -1)\n                ) {\n                  if (runtime.require('storage').get(system._id)) {\n                    runtime.require('github').merge(system);\n                  } else {\n                    runtime.require('storage').set(system._id, system);\n                  }\n\n                  // save index\n                  if (!systems) {\n                    systems = { 'systems': [system._id] };\n                  } else {\n                    if (systems.systems.indexOf(system._id) === -1) {\n                      systems.systems.push(system._id);\n                    }\n                  }\n                  runtime.require('storage').set('system-designer-systems', systems);\n\n                  // refresh\n                  if (!runtime.require('factory').system()) {\n                    sys = runtime.require('factory').create(system);\n                    runtime.require('state').space(sys.name());\n                  }\n\n                  runtime.require('spaces').render();\n                  runtime.require('workspace').render();\n                  runtime.require('router').update();\n\n                  runtime.require('designer').save();\n                }\n              })\n              .catch(function (e) {\n                runtime.require('message').danger('<strong>GitHub:</strong> ' + e.response.data.message + '.');\n              });\n          }\n        });\n\n        if (contents.data.length === 0) {\n          runtime.require('message').info('there is no system in your repository.');\n        } else {\n          runtime.require('message').success('Pull request finished with success.');\n        }\n      })\n      .catch(function (e) {\n        runtime.require('message').danger('<strong>GitHub:</strong> ' + e.response.data.message + '.');\n      });\n  } else {\n    runtime.require('message').warning('No configuration found for GitHub. Please set the correct information in the configuration panel.');\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "11845140101e5ae": {
      "_id": "11845140101e5ae",
      "component": "Github",
      "state": "push",
      "action": "function push(comment, createHTML, createNode, logLevel, createPackage) {\n  var config = {},\n    gh = null,\n    userName = '',\n    repository = '',\n    designer = null,\n    system = {},\n    repo1 = null,\n    repo2 = null,\n    repo3 = null;\n\n  config = this.require('storage').get('system-designer-config');\n  if (config && config.githubToken && config.githubRepository) {\n\n    gh = new GitHub({\n      token: atob(config.githubToken)\n    });\n\n    userName = config.githubRepository.split('/')[0];\n    repository = config.githubRepository.split('/')[1];\n\n    designer = this.require('designer');\n\n    if (this.require('factory').system()) {\n      system = this.require('db').collections().System.find({\n        '_id': this.require('factory').system().id()\n      })[0];\n\n      system = JSON.parse(JSON.stringify(system));\n\n      repo1 = gh.getRepo(userName, repository);\n      repo2 = gh.getRepo(userName, repository);\n      repo3 = gh.getRepo(userName, repository);\n      repo4 = gh.getRepo(userName, repository);\n      \n      var generatedId = Math.random() * 100000000000000000;\n      var tempParam = '?_temp=' + generatedId;\n\n      repo1.writeFile('master', system.name + '.json' + tempParam, JSON.stringify(system), comment || 'updated with System Designer', {})\n        .then(function (response) {\n          var name = response.data.content.name.replace('.json', '');\n          var js = '';\n          var htmlSource = '';\n          var jsSource = '';\n          var packageSource = {};\n\n          runtime.require('message').success('system ' + name + ' pushed on GitHub.');\n\n          // HTML\n          if (createHTML) {\n            htmlSource = runtime.require('export-app-github.html').source();\n            htmlSource = htmlSource\n              .replace(/{{logLevel}}/g, logLevel)\n              .replace(/{{name}}/g, runtime.require('factory').system().name());\n\n            repo2.writeFile('master', runtime.require('factory').system().name() + '.html' + tempParam, htmlSource, 'created with System Designer', {})\n              .then(function (response) {\n                var name = response.data.content.name;\n                runtime.require('message').success(name + ' created on GitHub.');\n              })\n              .catch(function (e) {\n                runtime.require('message').danger('<strong>GitHub:</strong> ' + e.response.data.message + '.');\n              });\n          }\n\n          // Node\n          if (createNode) {\n            jsSource = runtime.require('app-github.js').source();\n            jsSource = jsSource\n              .replace(/{{logLevel}}/g, logLevel)\n              .replace(/{{description}}/g, runtime.require('factory').system().description().replace(/\\n/g, '\\n * '))\n              .replace(/{{version}}/g, runtime.require('factory').system().version())\n              .replace(/{{name}}/g, runtime.require('factory').system().name());\n\n            repo3.writeFile('master', runtime.require('factory').system().name() + '.js' + tempParam, jsSource, 'created with System Designer', {})\n              .then(function (response) {\n                var name = response.data.content.name;\n                runtime.require('message').success(name + ' created on GitHub.');\n              })\n              .catch(function (e) {\n                runtime.require('message').danger('<strong>GitHub:</strong> ' + e.response.data.message + '.');\n              });\n          }\n\n          // PACKAGE\n          if (createPackage) {\n            packageSource.name = runtime.require('factory').system().name();\n            packageSource.version = runtime.require('factory').system().version();\n            packageSource.description = runtime.require('factory').system().description();\n            packageSource.main = './' + runtime.require('factory').system().name() + '.json';\n            packageSource.repository = {};\n            packageSource.repository.type = 'git';\n            packageSource.repository.url = 'https://github.com/' + config.githubRepository;\n\n            repo4.writeFile('master', 'package.json' + tempParam, JSON.stringify(packageSource, null, '  ').toString(), 'created with System Designer', {})\n              .then(function (response) {\n                var name = response.data.content.name;\n                runtime.require('message').success(name + ' created on GitHub.');\n              })\n              .catch(function (e) {\n                runtime.require('message').danger('<strong>GitHub:</strong> ' + e.response.data.message + '.');\n              });\n          }\n        })\n        .catch(function (e) {\n          runtime.require('message').danger('<strong>GitHub:</strong> ' + e.response.data.message + '.');\n        });\n    } else {\n      runtime.require('message').warning('There is no system to push on GitHub.');\n    }\n  } else {\n    runtime.require('message').warning('No configuration found for GitHub. Please set the correct information in the configuration panel.');\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "y194b01571d100d9": {
      "_id": "y194b01571d100d9",
      "component": "Github",
      "state": "merge",
      "action": "function merge(sys) {\n  var System = this.require('System'),\n    name = '',\n    propName = '',\n    modelName = '',\n    compId = '',\n    modelId = '',\n    schemaId = '',\n    designer = this.require('designer'),\n    schemas = {},\n    models = {},\n    types = {},\n    components = {},\n    behaviors = {},\n    system = this.require('storage').get(sys._id),\n    message = this.require('message');\n\n  function _getModelId(name) {\n    var result = '',\n      id = '';\n\n    for (id in system.models) {\n      if (system.models[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getSchemaId(name) {\n    var result = '',\n      id = '';\n\n    for (id in system.schemas) {\n      if (system.schemas[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _canOverrideBehavior(id, component, state, behaviors) {\n    var behavior = {},\n      behaviorId = '';\n\n    for (behaviorId in behaviors) {\n      behavior = behaviors[behaviorId];\n      if (behavior.component === component && behavior.state === state && behavior._id !== id) {\n        delete behaviors[behavior._id];\n        break;\n      }\n    }\n  }\n\n  function _canOverride(sysId, schemas, behaviors, behavior) {\n    var def = {},\n      id = '',\n      result = true;\n\n    id = _getSchemaId(behavior.component);\n    def = schemas[id];\n\n    if (def && def[behavior.state]) {\n      if (def[behavior.state] === 'method') {\n        _canOverrideBehavior(behavior._id, behavior.component, behavior.state, behaviors);\n      }\n    }/* else {\n      result = false;\n    }*/ // case of behavior on components\n\n    return result;\n  }\n\n  if (Object.keys(sys).length) {\n\n    // schemas\n    schemas = JSON.parse(JSON.stringify(system.schemas));\n    for (name in sys.schemas) {\n      if (schemas[name]) {\n        for (propName in sys.schemas[name]) {\n          schemas[name][propName] = sys.schemas[name][propName];\n        }\n      } else {\n        if (!_getSchemaId(sys.schemas[name]._name)) {\n          schemas[name] = sys.schemas[name];\n        } else {\n          for (propName in sys.schemas[name]) {\n            if (propName.indexOf('_') !== 0) {\n              schemas[_getSchemaId(sys.schemas[name]._name)][propName] = sys.schemas[name][propName];\n            }\n          }\n        }\n      }\n    }\n    system.schemas = schemas;\n\n    // models\n    models = JSON.parse(JSON.stringify(system.models));\n    for (name in sys.models) {\n      if (models[name]) {\n        for (propName in sys.models[name]) {\n          models[name][propName] = sys.models[name][propName];\n        }\n      } else {\n        if (!_getModelId(sys.models[name]._name)) {\n          models[name] = sys.models[name];\n        } else {\n          for (propName in sys.models[name]) {\n            if (propName.indexOf('_') !== 0) {\n              models[_getModelId(sys.models[name]._name)][propName] = sys.models[name][propName];\n            }\n          }\n        }\n      }\n    }\n    system.models = models;\n\n    // types\n    types = JSON.parse(JSON.stringify(system.types));\n    for (name in sys.types) {\n      if (types[name]) {\n        for (propName in sys.types[name]) {\n          types[name][propName] = sys.types[name][propName];\n        }\n      } else {\n        types[name] = sys.types[name];\n      }\n    }\n    system.types = types;\n\n    // behaviors\n    behaviors = JSON.parse(JSON.stringify(system.behaviors));\n    for (name in sys.behaviors) {\n      if (sys.behaviors[name].component === sys._id || _canOverride(sys._id, schemas, behaviors, sys.behaviors[name])) {\n        behaviors[name] = sys.behaviors[name];\n      }\n    }\n    system.behaviors = behaviors;\n\n    // components\n    components = JSON.parse(JSON.stringify(system.components));\n    for (modelName in sys.components) {\n      if (!components[modelName]) {\n        components[modelName] = {};\n      }\n      for (compId in sys.components[modelName]) {\n        if (components[modelName][compId]) {\n          for (propName in sys.components[modelName][compId]) {\n            components[modelName][compId][propName] = sys.components[modelName][compId][propName];\n          }\n        } else {\n          components[modelName][compId] = sys.components[modelName][compId];\n        }\n      }\n    }\n\n    system.schemas = schemas;\n    system.models = models;\n    system.types = types;\n    system.behaviors = behaviors;\n    system.components = components;\n\n    system.version = sys.version;\n    system.description = sys.description;\n\n    this.require('storage').set(sys._id, system);\n    if (this.require('factory').system().id() === system._id) {\n      this.require('factory').create(system);\n    }\n  } else {\n    if (this.require('factory').system()) {\n      message.danger('The system you try to merge is invalid.');\n    } else {\n      message.danger('There is no system to compose with.');\n    }\n  }\n}",
      "useCoreAPI": false,
      "core": false
    }
  },
  "types": {},
  "components": { "Github": { "github": { "_id": "github" } } },
  "_id": "1b9061a92113859"
}
