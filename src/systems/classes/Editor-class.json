{
  "name": "Editor-class",
  "master": false,
  "version": "1.0.0",
  "description": "",
  "schemas": {
    "1a3811dc79129d0": {
      "_id": "1a3811dc79129d0",
      "_name": "Editor",
      "_inherit": ["_Component"],
      "editor": "property",
      "type": "property",
      "context": "property",
      "render": "method",
      "initValue": "method",
      "getValue": "method",
      "setValue": "method",
      "setEditor": "method",
      "undo": "method",
      "redo": "method",
      "selectAll": "method",
      "copy": "method",
      "paste": "method"
    }
  },
  "models": {
    "17a551ea931289c": {
      "_id": "17a551ea931289c",
      "_name": "Editor",
      "editor": {
        "type": "editorRef",
        "readOnly": true,
        "mandatory": true,
        "default": {}
      },
      "render": {},
      "getValue": { "result": "any" },
      "setValue": {
        "params": [
          { "name": "val", "type": "any", "mandatory": false, "default": "" }
        ]
      },
      "type": {
        "type": "editorRuntimeType",
        "readOnly": false,
        "mandatory": false,
        "default": "ace"
      },
      "setEditor": {
        "params": [
          {
            "name": "mode",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "value",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "lineNumber",
            "type": "number",
            "mandatory": false,
            "default": 1
          },
          {
            "name": "autocomplete",
            "type": "boolean",
            "mandatory": false,
            "default": false
          }
        ]
      },
      "context": {
        "type": "editorType",
        "readOnly": false,
        "mandatory": false,
        "default": "system"
      },
      "initValue": {
        "params": [
          {
            "name": "value",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "lineNumber",
            "type": "number",
            "mandatory": false,
            "default": 1
          }
        ]
      },
      "undo": {},
      "redo": {},
      "selectAll": {},
      "copy": {},
      "paste": {}
    }
  },
  "behaviors": {
    "1b6011ee4810caa": {
      "_id": "1b6011ee4810caa",
      "component": "Editor",
      "state": "getValue",
      "action": "function getValue() { \n  var result = '';\n  \n  switch (this.type()) {\n    case 'ace':\n      result = this.editor().getValue();\n      break;\n    case 'codemirror':\n      result = this.editor().getValue();\n      break;\n    default:\n      break;\n  }\n  \n  return result;\n}",
      "useCoreAPI": false,
      "core": false
    },
    "18cfb1c93610ad4": {
      "_id": "18cfb1c93610ad4",
      "component": "Editor",
      "state": "setValue",
      "action": "function setValue(val) { \n  switch (this.type()) {\n    case 'ace':\n      result = this.editor().setValue(val);\n      break;\n    case 'codemirror':\n      result = this.editor().setValue(val);\n      break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "1a63c188a61e193": {
      "_id": "1a63c188a61e193",
      "component": "Editor",
      "state": "setEditor",
      "action": "function setEditor(mode, value, lineNumber, autocomplete) {\n  var language = {\n    'text': 'text/x-textile',\n    'json': 'application/json',\n    'javascript': 'text/javascript',\n    'html': 'htmlmixed',\n    'css': 'text/css'\n  };\n\n  switch (this.type()) {\n    case 'ace':\n      switch (this.context()) {\n        case 'system':\n        case 'schema':\n        case 'model':\n        case 'type':\n          this.editor().getSession().setMode('ace/mode/' + mode);\n          this.editor().setValue(value);\n          this.editor().gotoLine(lineNumber);\n          this.editor().getSession().$undoManager.reset();\n          this.editor().getSession().setUndoManager(new ace.UndoManager());\n          this.editor().getSession().setTabSize(2);\n          this.editor().focus();\n          break;\n        case 'behavior':\n          if (mode === 'javascript') {\n            this.editor().getSession().setMode('ace/mode/' + mode);\n            this.editor().getSession().setTabSize(2);\n\n            var completer = {\n              getCompletions: function (editor, session, pos, prefix, callback) {\n                var systemId = '',\n                  result = [],\n                  behavior = {},\n                  schemaName = '',\n                  schemas = {},\n                  schema = {},\n                  parents = {},\n                  i = 0;\n                  \n                if (this.require('state').menu() !== 'action') {\n                  return;\n                }\n                \n                function hasDot() {\n                  var result = false;\n                  if (editor.session.getLine(pos.row)[pos.column - 1 - prefix.length] === '.') {\n                    result = true;\n                  }\n                  return result;\n                }\n\n                function _getSchema(schemas, name) {\n                  var result = '',\n                    id = '';\n\n                  for (id in schemas) {\n                    if (schemas[id]._name === name) {\n                      result = schemas[id];\n                      break;\n                    }\n                  }\n                  return result;\n                }\n                \n                function _findSchemaName(id, components) {\n                  var result = id,\n                      modelName = '';\n                \n                  for (modelName in components) {\n                    if (typeof components[modelName][id] !== 'undefined') {\n                      result = modelName;\n                      break;\n                    }\n                  }\n                  return result;\n                }  \n\n                id = document.location.href.split('#')[1];\n                systemId = document.location.href.split('#')[2];\n\n                system = this.require('storage').get(systemId);\n                if (system && hasDot()) {\n                  schemaName = _findSchemaName(system.behaviors[id].component, this.require('factory').system().components());\n                  schemas = system.schemas;\n\n                  schema = _getSchema(schemas, schemaName);\n\n                  for (var name in schema) {\n                    if (name.indexOf('_') !== 0) {\n                      result.push({ name: name, caption: name, snippet: name + '($0)', meta: schema[name] });\n                    }\n                  }\n\n                  // case of system\n                  if (system.behaviors[id].component === systemId) {\n                    if ('id'.indexOf(prefix) === 0) {\n                      result.push({ name: 'id', caption:'id', snippet: 'id()', meta: 'property (inherited)' });\n                    }\n                    if ('require'.indexOf(prefix) === 0) {\n                      result.push({ name: 'require', caption:'require', snippet: 'require(\\'$0\\')', meta: 'method (inherited)' });\n                    }\n                    if ('destroy'.indexOf(prefix) === 0) {\n                      result.push({ name: 'destroy', caption:'destroy', snippet: 'destroy()', meta: 'method (inherited)' });\n                    }\n                    if ('init'.indexOf(prefix) === 0) {\n                      result.push({ name: 'init', caption:'init', snippet: 'init($0)', meta: 'method (inherited)' });\n                    }\n                    if ('error'.indexOf(prefix) === 0) {\n                      result.push({ name: 'error', caption:'error', snippet: 'error($0)', meta: 'event (inherited)' });\n                    }\n                  }\n\n                  // inherited\n                  parents = schema._inherit;\n                  if (parents) {\n                    length = parents.length;\n\n                    for (i = 0; i < length; i++) {\n                      if (parents[i].indexOf('_Component') !== -1) {\n                        if ('id'.indexOf(prefix) === 0) {\n                          result.push({ name: 'id', caption:'id', snippet: 'id()', meta: 'property (inherited)' });\n                        }\n                        if ('require'.indexOf(prefix) === 0) {\n                          result.push({ name: 'require', caption:'require', snippet: 'require(\\'$0\\')', meta: 'method (inherited)' });\n                        }\n                        if ('destroy'.indexOf(prefix) === 0) {\n                          result.push({ name: 'destroy', caption:'destroy', snippet: 'destroy()', meta: 'method (inherited)' });\n                        }\n                        if ('init'.indexOf(prefix) === 0) {\n                          result.push({ name: 'init', caption:'init', snippet: 'init($0)', meta: 'method (inherited)' });\n                        }\n                        if ('error'.indexOf(prefix) === 0) {\n                          result.push({ name: 'error', caption:'error', snippet: 'error($0)', meta: 'event (inherited)' });\n                        }\n                      } else {\n                        schema = _getSchema(schemas, parents[i]);\n\n                        for (var prop in schema) {\n                          if (prop.indexOf('_') !== 0 && prop.indexOf(prefix) === 0) {\n                            result.push({ name: prop, caption: prop, snippet: prop + '($0)', meta: schema[prop] + ' (inherited)' });\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                \n                // snippets\n                if (hasDot()) {\n                  if ('collections'.indexOf(prefix) === 0) {\n                    result.push({ name: 'snip_collections', caption: 'collections', snippet:  'this.require(\\'db\\').collections()', meta: 'snippet' });\n                  }\n                  if ('require'.indexOf(prefix) === 0) {\n                    result.push({ name: 'snip_require', caption: 'require', snippet:  'this.require(\\'$0\\')', meta: 'snippet' });\n                  }\n                  if ('debug'.indexOf(prefix) === 0) {\n                    result.push({ name: 'snip_debug', caption: 'debug', snippet:  'this.require(\\'logger\\').debug(\\'$0\\')', meta: 'snippet' });\n                  }\n                  if ('info'.indexOf(prefix) === 0) {\n                    result.push({ name: 'snip_info', caption: 'info', snippet:  'this.require(\\'logger\\').info(\\'$0\\')', meta: 'snippet' });\n                  }\n                  if ('warn'.indexOf(prefix) === 0) {\n                    result.push({ name: 'snip_warn', caption: 'warn', snippet:  'this.require(\\'logger\\').warn(\\'$0\\')', meta: 'snippet' });\n                  }\n                  if ('error'.indexOf(prefix) === 0) {\n                    result.push({ name: 'snip_error', caption: 'error', snippet:  'this.require(\\'logger\\').error(\\'$0\\')', meta: 'snippet' });\n                  }\n                }\n\n                result.sort(function (a, b) {\n                  if (a.name > b.name) {\n                    return 1;\n                  }\n                  if (a.name < b.name) {\n                    return -1;\n                  }\n                  return 0;\n                }\n                );\n                callback(null, result);\n              }.bind(this)\n            };\n\n            this.editor().setOptions({\n              enableLiveAutocompletion: [completer]\n            });\n            this.editor().setValue(value);\n\n            this.editor().gotoLine(lineNumber);\n\n            this.editor().getSession().$undoManager.reset();\n            this.editor().getSession().setUndoManager(new ace.UndoManager());\n            this.editor().focus();\n          } else {\n            this.editor().getSession().setMode('ace/mode/' + mode);\n            this.editor().setValue(value);\n            this.editor().gotoLine(lineNumber);\n            this.editor().getSession().$undoManager.reset();\n            this.editor().getSession().setUndoManager(new ace.UndoManager());\n            this.editor().focus();\n          }\n          break;\n        case 'component':\n          this.editor().getSession().setMode('ace/mode/' + mode);\n          this.editor().getSession().setTabSize(2);\n          if (autocomplete) {\n            this.editor().setOptions({\n              enableLiveAutocompletion: true,\n            });\n          }\n          this.editor().setValue(value);\n          this.editor().gotoLine(lineNumber);\n          this.editor().getSession().$undoManager.reset();\n          this.editor().getSession().setUndoManager(new ace.UndoManager());\n          this.editor().focus();\n          break;\n        default:\n          break;\n      }\n      break;\n    case 'codemirror':\n      switch (this.context()) {\n        case 'system':\n        case 'schema':\n        case 'model':\n        case 'type':\n        case 'behavior':\n        case 'component':\n          this.editor().setValue('');\n          this.editor().setOption('mode', language[mode]);\n          this.editor().setValue(value);\n          this.editor().setCursor({\n            line: lineNumber - 1,\n            ch: 0\n          });\n          this.editor().clearHistory();\n          break;\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "14e9517c531160a": {
      "_id": "14e9517c531160a",
      "component": "Editor",
      "state": "render",
      "action": "function render() {\n  switch (this.type()) {\n    case 'ace':\n      switch (this.context()) {\n        case 'system':\n          this.editor().getSession().setMode('ace/mode/text');\n          this.editor().setShowPrintMargin(false);\n          this.editor().setReadOnly(false);\n          this.editor().getSession().setTabSize(2);\n          this.editor().$blockScrolling = Infinity;\n          this.editor().setValue('');\n          this.editor().focus();\n          this.editor().commands.addCommand({\n            name: 'myCommand',\n            bindKey: { win: 'Ctrl-S', mac: 'Command-S' },\n            exec: function (editor) {\n              runtime.require('designer').save();\n            }\n          });\n          this.editor().commands.addCommand({\n            name: 'gotoCommand',\n            bindKey: { win: 'Ctrl-O', mac: 'Command-O' },\n            exec: function (editor) {\n              if ($('#designer-dialog-command-modal').length) {\n                $('#designer-dialog-command-modal').modal('show');\n              } else {\n                var Dialog = runtime.require('DialogCommand');\n                var dialog = new Dialog({ 'title': '' });\n                dialog.show();\n              }\n            }\n          });\n          break;\n        case 'schema':\n          this.editor().getSession().setMode('ace/mode/json');\n          var langTools = ace.require('ace/ext/language_tools');\n          var completer = {\n            getCompletions: function (editor, session, pos, prefix, callback) {\n              var result = [];\n              var system = '';\n              var schemas = '';\n              var systemId = '';\n\n              // snippets and helpers\n              if ('property'.indexOf(prefix) === 0) {\n                result.push({ name: 'property', value: 'property', meta: 'type' });\n                result.push({ name: 'property', caption: 'property', snippet: '\"$0\":\"property\",\\n', meta: \"add a property (snippet)\" });\n              }\n              if ('link'.indexOf(prefix) === 0) {\n                result.push({ name: 'link', value: 'link', meta: 'type' });\n                result.push({ name: 'link', caption: 'link', snippet: '\"$0\":\"link\",\\n', meta: 'add a link (snippet)' });\n              }\n              if ('collection'.indexOf(prefix) === 0) {\n                result.push({ name: 'collection', value: 'collection', meta: 'type' });\n                result.push({ name: 'collection', caption: 'collection', snippet: '\"$0\":\"collection\",\\n', meta: 'add a collection (snippet)' });\n              }\n              if ('method'.indexOf(prefix) === 0) {\n                result.push({ name: 'method', value: 'method', meta: 'type' });\n                result.push({ name: 'method', caption: 'method', snippet: '\"$0\":\"method\",\\n', meta: 'add a method (snippet)' });\n              }\n              if ('event'.indexOf(prefix) === 0) {\n                result.push({ name: 'event', value: 'event', meta: 'type' });\n                result.push({ name: 'event', caption: 'event', snippet: '\"$0\":\"event\",\\n', meta: 'add an event (snippet)' });\n              }\n\n              // schemas\n              systemId = document.location.href.split('#')[2].split('?')[0];\n              system = this.require('storage').get(systemId);\n\n              if (system) {\n                result.push({ name: \"_Component\", value: \"_Component\", meta: \"schema\" });\n\n                schemas = system.schemas;\n                for (var name in schemas) {\n                  if (schemas[name]._name.indexOf(prefix) === 0) {\n                    result.push({ name: '' + schemas[name]._name, value: '' + schemas[name]._name, meta: \"schema\" });\n                  }\n                }\n              }\n\n              callback(null, result);\n            }.bind(this)\n          };\n          this.editor().setOptions({\n            enableLiveAutocompletion: [completer]\n          });\n          this.editor().setShowPrintMargin(false);\n          this.editor().setReadOnly(false);\n          this.editor().getSession().setTabSize(2);\n          this.editor().$blockScrolling = Infinity;\n          this.editor().setValue('');\n          this.editor().commands.addCommand({\n            name: 'myCommand',\n            bindKey: { win: 'Ctrl-S', mac: 'Command-S' },\n            exec: function (editor) {\n              runtime.require('designer').save();\n            }\n          });\n          this.editor().commands.addCommand({\n            name: 'gotoCommand',\n            bindKey: { win: 'Ctrl-O', mac: 'Command-O' },\n            exec: function (editor) {\n              if ($('#designer-dialog-command-modal').length) {\n                $('#designer-dialog-command-modal').modal('show');\n              } else {\n                var Dialog = runtime.require('DialogCommand');\n                var dialog = new Dialog({ 'title': '' });\n                dialog.show();\n              }\n            }\n          });\n          this.editor().focus();\n          break;\n        case 'model':\n          this.editor().getSession().setMode('ace/mode/json');\n          this.editor().getSession().setTabSize(2);\n          var completer = {\n            getCompletions: function (editor, session, pos, prefix, callback) {\n              var systemId = '',\n                modelId = '',\n                modelName = '',\n                typeName = '',\n                result = [],\n                types = {},\n                schemas = {};\n\n              if ('any'.indexOf(prefix) === 0) {\n                result.push({ name: \"any\", value: \"any\", meta: \"natif type\" });\n              }\n              if ('string'.indexOf(prefix) === 0) {\n                result.push({ name: \"string\", value: \"string\", meta: \"natif type\" });\n              }\n              if ('number'.indexOf(prefix) === 0) {\n                result.push({ name: \"number\", value: \"number\", meta: \"natif type\" });\n              }\n              if ('boolean'.indexOf(prefix) === 0) {\n                result.push({ name: \"boolean\", value: \"boolean\", meta: \"natif type\" });\n              }\n              if ('date'.indexOf(prefix) === 0) {\n                result.push({ name: \"date\", value: \"date\", meta: \"natif type\" });\n              }\n              if ('object'.indexOf(prefix) === 0) {\n                result.push({ name: \"object\", value: \"object\", meta: \"natif type\" });\n              }\n              if ('array'.indexOf(prefix) === 0) {\n                result.push({ name: \"array\", value: \"array\", meta: \"natif type\" });\n              }\n              if ('json'.indexOf(prefix) === 0) {\n                result.push({ name: \"json\", value: \"json\", meta: \"alias\" });\n              }\n              if ('html'.indexOf(prefix) === 0) {\n                result.push({ name: \"html\", value: \"html\", meta: \"alias\" });\n              }\n              if ('css'.indexOf(prefix) === 0) {\n                result.push({ name: \"css\", value: \"css\", meta: \"alias\" });\n              }\n              if ('text'.indexOf(prefix) === 0) {\n                result.push({ name: \"text\", value: \"text\", meta: \"alias\" });\n              }\n              if ('javascript'.indexOf(prefix) === 0) {\n                result.push({ name: \"javascript\", value: \"javascript\", meta: \"alias\" });\n              }\n\n              systemId = document.location.href.split('#')[2].split('?')[0];\n              modelId = document.location.href.split('#')[1].split('#')[0];\n              system = this.require('storage').get(systemId);\n\n              if (system) {\n                types = system.types;\n                for (typeName in types) {\n                  if (types[typeName].name.indexOf(prefix) === 0) {\n                    result.push({ name: types[typeName].name, value: types[typeName].name, meta: \"custom type\" });\n                  }\n                }\n                if ('_Component'.indexOf(prefix) === 0) {\n                  result.push({ name: \"_Component\", value: \"_Component\", meta: \"model\" });\n                }\n                schemas = system.schemas;\n                for (var name in schemas) {\n                  if (schemas[name]._name.indexOf(prefix) === 0) {\n                    result.push({ name: '' + schemas[name]._name, value: '' + schemas[name]._name, meta: \"model\" });\n                  }\n                }\n              }\n\n              // helpers\n              if ('dependency'.indexOf(prefix) === 0) {\n                result.push({ name: \"kind_dependency\", value: \"dependency\", meta: \"kind of relationship\" });\n              }\n              if ('aggregation'.indexOf(prefix) === 0) {\n                result.push({ name: \"kind_aggregation\", value: \"aggregation\", meta: \"kind of relationship\" });\n              }\n              if ('composition'.indexOf(prefix) === 0) {\n                result.push({ name: \"kind_composition\", value: \"composition\", meta: \"kind of relationship\" });\n              }\n              if ('normal'.indexOf(prefix) === 0) {\n                result.push({ name: \"kind_normal\", value: \"normal\", meta: \"kind of relationship\" });\n              }\n\n              // snippets\n              if ('property'.indexOf(prefix) === 0) {\n                result.push({ name: 'snip_property', caption: 'property', snippet: '\"$0\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"any\\\",\\n\\t\\\"readOnly\\\": false,\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": \\\"\\\"\\n}\\t', meta: 'override an inherited property (snippet)' });\n              }\n              if ('link'.indexOf(prefix) === 0) {\n                result.push({ name: 'snip_link', caption: 'link', snippet: '\"$0\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"_Component\\\",\\n\\t\\\"kind\\\": \\\"normal\\\",\\n\\t\\\"readOnly\\\": false,\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": \\\"\\\"\\n}\\t', meta: 'override an inherited link (snippet)' });\n              }\n              if ('collection'.indexOf(prefix) === 0) {\n                result.push({ name: 'snip_collection', caption: 'collection', snippet: '\"$0\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"[_Component]\\\",\\n\\t\\\"kind\\\": \\\"normal\\\",\\n\\t\\\"readOnly\\\": false,\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": []\\n}\\t', meta: 'override an inherited collection (snippet)' });\n              }\n              if ('method'.indexOf(prefix) === 0) {\n                result.push({ name: 'snip_property', caption: 'method', snippet: '\"$0\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"params\\\": {\\n\\t\\t\\\"name\\\": \\\"param\\\",\\n\\t\\t\\\"description\\\": \\\"\\\",\\n\\t\\t\\\"type\\\": \\\"any\\\",\\n\\t\\t\\\"mandatory\\\": false,\\n\\t\\t\\\"default\\\": null\\n\\t},\\n\\t\\\"result\\\": \\\"any\\“\\n}\\t', meta: 'override an inherited method (snippet)' });\n              }\n              if ('event'.indexOf(prefix) === 0) {\n                result.push({ name: 'snip_event', caption: 'event', snippet: '\"$0\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"params\\\": {\\n\\t\\t\\\"name\\\": \\\"param\\\",\\n\\t\\t\\\"description\\\": \\\"\\\",\\n\\t\\t\\\"type\\\": \\\"any\\\",\\n\\t\\t\\\"mandatory\\\": false,\\n\\t\\t\\\"default\\\": null\\n\\t}\\n}', meta: 'override an inherited event (snippet)' });\n              }\n\n              if ('parameter'.indexOf(prefix) === 0) {\n                result.push({ name: 'snip_parameter', caption: 'parameter', snippet: '{\\n\\t\\\"name\\\": \\\"$0\\\",\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"any\\\",\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": null\\n}\\t', meta: 'add a new parameter (snippet)' });\n              }\n              if ('default date'.indexOf(prefix) === 0) {\n                result.push({ name: 'snip_default_date', caption: 'default date', snippet: '1970-01-01T00:00:00.000Z', meta: 'set a default date value (snippet)' });\n              }\n\n              result.sort(function (a, b) {\n                if (a.name > b.name) {\n                  return 1;\n                }\n                if (a.name < b.name) {\n                  return -1;\n                }\n                return 0;\n              }\n              );\n\n              callback(null, result);\n            }.bind(this)\n          };\n\n          this.editor().setOptions({\n            enableLiveAutocompletion: [completer]\n          });\n          this.editor().setShowPrintMargin(false);\n          this.editor().setReadOnly(false);\n          this.editor().$blockScrolling = Infinity;\n          this.editor().setValue('');\n          this.editor().commands.addCommand({\n            name: 'myCommand',\n            bindKey: { win: 'Ctrl-S', mac: 'Command-S' },\n            exec: function (editor) {\n              runtime.require('designer').save();\n            }\n          });\n          this.editor().commands.addCommand({\n            name: 'gotoCommand',\n            bindKey: { win: 'Ctrl-O', mac: 'Command-O' },\n            exec: function (editor) {\n              if ($('#designer-dialog-command-modal').length) {\n                $('#designer-dialog-command-modal').modal('show');\n              } else {\n                var Dialog = runtime.require('DialogCommand');\n                var dialog = new Dialog({ 'title': '' });\n                dialog.show();\n              }\n            }\n          });\n          this.editor().focus();\n\n          $(function () {\n            $('[data-toggle=\"tooltip\"]').tooltip({ 'container': 'body', delay: { \"show\": 1000, \"hide\": 100 } });\n          });\n          break;\n        case 'type':\n          this.editor().getSession().setMode('ace/mode/json');\n          this.editor().getSession().setTabSize(2);\n          var langTools = ace.require('ace/ext/language_tools');\n          var completer = {\n            getCompletions: function (editor, session, pos, prefix, callback) {\n              var systemId = '',\n                typeName = '',\n                types = {},\n                result = [],\n                schemas = {};\n\n              if ('any'.indexOf(prefix) === 0) {\n                result.push({ name: \"any\", value: \"any\", meta: \"natif type\" });\n              }\n              if ('string'.indexOf(prefix) === 0) {\n                result.push({ name: \"string\", value: \"string\", meta: \"natif type\" });\n              }\n              if ('number'.indexOf(prefix) === 0) {\n                result.push({ name: \"number\", value: \"number\", meta: \"natif type\" });\n              }\n              if ('boolean'.indexOf(prefix) === 0) {\n                result.push({ name: \"boolean\", value: \"boolean\", meta: \"natif type\" });\n              }\n              if ('date'.indexOf(prefix) === 0) {\n                result.push({ name: \"date\", value: \"date\", meta: \"natif type\" });\n              }\n              if ('object'.indexOf(prefix) === 0) {\n                result.push({ name: \"object\", value: \"object\", meta: \"natif type\" });\n              }\n              if ('array'.indexOf(prefix) === 0) {\n                result.push({ name: \"array\", value: \"array\", meta: \"natif type\" });\n              }\n              if ('json'.indexOf(prefix) === 0) {\n                result.push({ name: \"json\", value: \"json\", meta: \"alias\" });\n              }\n              if ('html'.indexOf(prefix) === 0) {\n                result.push({ name: \"html\", value: \"html\", meta: \"alias\" });\n              }\n              if ('css'.indexOf(prefix) === 0) {\n                result.push({ name: \"css\", value: \"css\", meta: \"alias\" });\n              }\n              if ('text'.indexOf(prefix) === 0) {\n                result.push({ name: \"text\", value: \"text\", meta: \"alias\" });\n              }\n              if ('javascript'.indexOf(prefix) === 0) {\n                result.push({ name: \"javascript\", value: \"javascript\", meta: \"alias\" });\n              }\n\n              // snippet\n              if ('property'.indexOf(prefix) === 0) {\n                result.push({ name: 'property', caption: 'property', snippet: '\\\"$0\\\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"any\\\",\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": \\\"\\\"\\n}', meta: \"add a property (snippet)\" });\n              }\n\n              systemId = document.location.href.split('#')[2];\n              system = this.require('storage').get(systemId);\n\n              if (system) {\n                types = system.types;\n                for (typeName in types) {\n                  if (types[typeName].name.indexOf(prefix) === 0) {\n                    result.push({ name: types[typeName].name, value: types[typeName].name, meta: \"custom type\" });\n                  }\n                }\n                if ('_Component'.indexOf(prefix) === 0) {\n                  result.push({ name: \"_Component\", value: \"_Component\", meta: \"model\" });\n                }\n                schemas = system.schemas;\n                for (var name in schemas) {\n                  if (schemas[name]._name.indexOf(prefix) === 0) {\n                    result.push({ name: '' + schemas[name]._name, value: '' + schemas[name]._name, meta: \"model\" });\n                  }\n                }\n              }\n\n              result.sort(function (a, b) {\n                if (a.name > b.name) {\n                  return 1;\n                }\n                if (a.name < b.name) {\n                  return -1;\n                }\n                return 0;\n              }\n              );\n              callback(null, result);\n            }.bind(this)\n          };\n\n          this.editor().setOptions({\n            enableLiveAutocompletion: [completer]\n          });\n\n          this.editor().setShowPrintMargin(false);\n          this.editor().setReadOnly(false);\n          this.editor().$blockScrolling = Infinity;\n          this.editor().setValue('');\n          this.editor().commands.addCommand({\n            name: 'myCommand',\n            bindKey: { win: 'Ctrl-S', mac: 'Command-S' },\n            exec: function (editor) {\n              runtime.require('designer').save();\n            }\n          });\n          this.editor().commands.addCommand({\n            name: 'gotoCommand',\n            bindKey: { win: 'Ctrl-O', mac: 'Command-O' },\n            exec: function (editor) {\n              if ($('#designer-dialog-command-modal').length) {\n                $('#designer-dialog-command-modal').modal('show');\n              } else {\n                var Dialog = runtime.require('DialogCommand');\n                var dialog = new Dialog({ 'title': '' });\n                dialog.show();\n              }\n            }\n          });\n          this.editor().focus();\n          break;\n        case 'behavior':\n          this.editor().getSession().on('changeMode', function(e, session){\n          \tif ('ace/mode/javascript' === session.getMode().$id) {\n          \t\tif (!!session.$worker) {\n          \t\t\tsession.$worker.send('setOptions', [{\n          \t\t\t\t'esversion': 11,\n          \t\t\t\t'esnext': false\n          \t\t\t}]);\n          \t\t}\n          \t}\n          });\n          \n          this.editor().getSession().setMode('ace/mode/javascript');\n          this.editor().getSession().setTabSize(2);\n          \n          var completer = {\n            getCompletions: function (editor, session, pos, prefix, callback) {\n\n              var systemId = '',\n                result = [],\n                behavior = {},\n                schemaName = '',\n                schemas = {},\n                schema = {},\n                parents = {},\n                i = 0;\n\n              if (this.require('state').menu() !== 'action') {\n                return;\n              }\n\n              function hasDot() {\n                var result = false;\n                if (editor.session.getLine(pos.row)[pos.column - 1 - prefix.length] === '.') {\n                  result = true;\n                }\n                return result;\n              }\n\n              function _searchApis(parents) {\n                var length = 0,\n                  i = 0;\n\n                if (parents) {\n                  length = parents.length;\n                  for (i = 0; i < length; i++) {\n                    if (parents[i].indexOf('_Component') !== -1) {\n                      if ('id'.indexOf(prefix) === 0) {\n                        result.push({ name: 'id', caption: 'id', snippet: 'id()', meta: 'property (inherited)' });\n                      }\n                      if ('require'.indexOf(prefix) === 0) {\n                        result.push({ name: 'require', caption: 'require', snippet: 'require(\\'$0\\')', meta: 'method (inherited)' });\n                      }\n                      if ('destroy'.indexOf(prefix) === 0) {\n                        result.push({ name: 'destroy', caption: 'destroy', snippet: 'destroy()', meta: 'method (inherited)' });\n                      }\n                      if ('init'.indexOf(prefix) === 0) {\n                        result.push({ name: 'init', caption: 'init', snippet: 'init($0)', meta: 'method (inherited)' });\n                      }\n                      if ('error'.indexOf(prefix) === 0) {\n                        result.push({ name: 'error', caption: 'error', snippet: 'error($0)', meta: 'event (inherited)' });\n                      }\n                    } else {\n                      schema = _getSchema(schemas, parents[i]);\n\n                      for (var prop in schema) {\n                        if (prop.indexOf('_') !== 0 && prop.indexOf(prefix) === 0) {\n                          result.push({ name: prop, caption: prop, snippet: prop + '($0)', meta: schema[prop] + ' (inherited)' });\n                        }\n                      }\n\n                      if (typeof schema._inherit !== 'undefined') {\n                        _searchApis(schema._inherit);\n                      }\n                    }\n                  }\n                }\n              }\n\n              function _getSchema(schemas, name) {\n                var result = '',\n                  id = '';\n\n                for (id in schemas) {\n                  if (schemas[id]._name === name) {\n                    result = schemas[id];\n                    break;\n                  }\n                }\n                return result;\n              }\n\n              function _findSchemaName(id, components) {\n                var result = id,\n                  modelName = '';\n\n                for (modelName in components) {\n                  if (typeof components[modelName][id] !== 'undefined') {\n                    result = modelName;\n                    break;\n                  }\n                }\n                return result;\n              }\n\n              id = document.location.href.split('#')[1];\n              systemId = document.location.href.split('#')[2];\n\n              system = this.require('storage').get(systemId);\n              \n              // helper on component name\n              if (system) {\n                components = system.components;\n                for (modelName in components) {\n                  for (componentId in components[modelName]) {\n                    if (components[modelName][componentId]._id.indexOf(prefix) === 0) {\n                      result.push({ name: componentId, value: componentId, meta: modelName + ' component' });\n                    }\n                  }\n                }\n              }\n\n              if (system && hasDot()) {\n                schemaName = _findSchemaName(system.behaviors[id].component, this.require('factory').system().components());\n                schemas = system.schemas;\n\n                schema = _getSchema(schemas, schemaName);\n\n                for (var name in schema) {\n                  if (name.indexOf('_') !== 0 && name.indexOf(prefix) === 0) {\n                    result.push({ name: name, caption: name, snippet: name + '($0)', meta: schema[name] });\n                  }\n                }\n\n                // case of system\n                if (system.behaviors[id].component === systemId) {\n                  if ('id'.indexOf(prefix) === 0) {\n                    result.push({ name: 'id', caption: 'id', snippet: 'id()', meta: 'property (inherited)' });\n                  }\n                  if ('require'.indexOf(prefix) === 0) {\n                    result.push({ name: 'require', caption: 'require', snippet: 'require(\\'$0\\')', meta: 'method (inherited)' });\n                  }\n                  if ('destroy'.indexOf(prefix) === 0) {\n                    result.push({ name: 'destroy', caption: 'destroy', snippet: 'destroy()', meta: 'method (inherited)' });\n                  }\n                  if ('init'.indexOf(prefix) === 0) {\n                    result.push({ name: 'init', caption: 'init', snippet: 'init($0)', meta: 'method (inherited)' });\n                  }\n                  if ('error'.indexOf(prefix) === 0) {\n                    result.push({ name: 'error', caption: 'error', snippet: 'error($0)', meta: 'event (inherited)' });\n                  }\n                }\n\n                // inherited\n                parents = schema._inherit;\n                if (parents) {\n                  length = parents.length;\n\n                  for (i = 0; i < length; i++) {\n                    if (parents[i].indexOf('_Component') !== -1) {\n                      if ('id'.indexOf(prefix) === 0) {\n                        result.push({ name: 'id', caption: 'id', snippet: 'id()', meta: 'property (inherited)' });\n                      }\n                      if ('require'.indexOf(prefix) === 0) {\n                        result.push({ name: 'require', caption: 'require', snippet: 'require(\\'$0\\')', meta: 'method (inherited)' });\n                      }\n                      if ('destroy'.indexOf(prefix) === 0) {\n                        result.push({ name: 'destroy', caption: 'destroy', snippet: 'destroy()', meta: 'method (inherited)' });\n                      }\n                      if ('init'.indexOf(prefix) === 0) {\n                        result.push({ name: 'init', caption: 'init', snippet: 'init($0)', meta: 'method (inherited)' });\n                      }\n                      if ('error'.indexOf(prefix) === 0) {\n                        result.push({ name: 'error', caption: 'error', snippet: 'error($0)', meta: 'event (inherited)' });\n                      }\n                    } else {\n                      schema = _getSchema(schemas, parents[i]);\n\n                      for (var prop in schema) {\n                        if (prop.indexOf('_') !== 0 & prop.indexOf(prefix) === 0) {\n                          result.push({ name: prop, caption: prop, snippet: prop + '($0)', meta: schema[prop] + ' (inherited)' });\n                        }\n                      }\n                      if (typeof schema._inherit !== 'undefined') {\n                        _searchApis(schema._inherit);\n                      }\n                    }\n                  }\n                }\n              }\n\n              if (!hasDot()) {\n                // snippets\n                if ('collections'.indexOf(prefix) === 0) {\n                  result.push({ name: 'snip_collections', caption: 'collections', snippet: 'this.require(\\'db\\').collections()', meta: 'get a collection (snippet)' });\n                }\n                if ('require'.indexOf(prefix) === 0) {\n                  result.push({ name: 'snip_require', caption: 'require', snippet: 'this.require(\\'$0\\')', meta: 'require a component (snippet)' });\n                }\n                if ('debug'.indexOf(prefix) === 0) {\n                  result.push({ name: 'snip_debug', caption: 'debug', snippet: 'this.require(\\'logger\\').debug(\\'$0\\')', meta: 'log a debug message (snippet)' });\n                }\n                if ('info'.indexOf(prefix) === 0) {\n                  result.push({ name: 'snip_info', caption: 'info', snippet: 'this.require(\\'logger\\').info(\\'$0\\')', meta: 'log an info message (snippet)' });\n                }\n                if ('warn'.indexOf(prefix) === 0) {\n                  result.push({ name: 'snip_warn', caption: 'warn', snippet: 'this.require(\\'logger\\').warn(\\'$0\\')', meta: 'log a warning message (snippet)' });\n                }\n                if ('error'.indexOf(prefix) === 0) {\n                  result.push({ name: 'snip_error', caption: 'error', snippet: 'this.require(\\'logger\\').error(\\'$0\\')', meta: 'log an error message (snippet)' });\n                }\n              }\n\n              result.sort(function (a, b) {\n                if (a.name > b.name) {\n                  return 1;\n                }\n                if (a.name < b.name) {\n                  return -1;\n                }\n                return 0;\n              }\n              );\n              callback(null, result);\n            }.bind(this)\n          };\n\n          // uncomment to add more autocomplete\n          //var langtools = ace.require(\"ace/ext/language_tools\");\n          //langtools.addCompleter(completer);\n\n          this.editor().setOptions({\n            enableLiveAutocompletion: [completer]\n            //enableLiveAutocompletion: true\n          });\n          this.editor().setShowPrintMargin(false);\n          this.editor().setReadOnly(false);\n          this.editor().$blockScrolling = Infinity;\n          this.editor().setValue('');\n          this.editor().commands.addCommand({\n            name: 'myCommand',\n            bindKey: { win: 'Ctrl-S', mac: 'Command-S' },\n            exec: function (editor) {\n              runtime.require('designer').save();\n            }\n          });\n          this.editor().commands.addCommand({\n            name: 'gotoCommand',\n            bindKey: { win: 'Ctrl-O', mac: 'Command-O' },\n            exec: function (editor) {\n              if ($('#designer-dialog-command-modal').length) {\n                $('#designer-dialog-command-modal').modal('show');\n              } else {\n                var Dialog = runtime.require('DialogCommand');\n                var dialog = new Dialog({ 'title': '' });\n                dialog.show();\n              }\n            }\n          });\n          this.editor().focus();\n          break;\n        case 'component':\n          this.editor().setShowPrintMargin(false);\n          this.editor().getSession().setTabSize(2);\n          this.editor().setReadOnly(false);\n          this.editor().$blockScrolling = Infinity;\n          this.editor().setValue('');\n\n          var completer = {\n            getCompletions: function (editor, session, pos, prefix, callback) {\n              var systemId = '',\n                system = '',\n                modelName = '',\n                componentId = '',\n                components = {},\n                result = [];\n\n              systemId = document.location.href.split('#')[3];\n              system = this.require('storage').get(systemId);\n\n              if (system) {\n                components = system.components;\n                for (modelName in components) {\n                  for (componentId in components[modelName]) {\n                    if (components[modelName][componentId]._id.indexOf(prefix) === 0) {\n                      result.push({ name: componentId, value: componentId, meta: modelName });\n                    }\n                  }\n                }\n              }\n\n              result.sort(function (a, b) {\n                if (a.name > b.name) {\n                  return 1;\n                }\n                if (a.name < b.name) {\n                  return -1;\n                }\n                return 0;\n              }\n              );\n              callback(null, result);\n            }.bind(this)\n          };\n\n          this.editor().setOptions({\n            enableLiveAutocompletion: [completer]\n          });\n\n          this.editor().commands.addCommand({\n            name: 'myCommand',\n            bindKey: { win: 'Ctrl-S', mac: 'Command-S' },\n            exec: function (editor) {\n              runtime.require('designer').save();\n            }\n          });\n          this.editor().commands.addCommand({\n            name: 'gotoCommand',\n            bindKey: { win: 'Ctrl-O', mac: 'Command-O' },\n            exec: function (editor) {\n              if ($('#designer-dialog-command-modal').length) {\n                $('#designer-dialog-command-modal').modal('show');\n              } else {\n                var Dialog = runtime.require('DialogCommand');\n                var dialog = new Dialog({ 'title': '' });\n                dialog.show();\n              }\n            }\n          });\n          break;\n        default:\n          break;\n      }\n      break;\n    case 'codemirror':\n      switch (this.context()) {\n        case 'system':\n          this.editor().addKeyMap({\n            \"Cmd-S\": function () { runtime.require('designer').save() },\n            \"Ctrl-S\": function () { runtime.require('designer').save() }\n          });\n          break;\n\n        case 'schema':\n          var snippets = [];\n          var system = '';\n          var schemas = '';\n          var systemId = '';\n\n          // snippets and helpers\n          snippets.push({ searchText: 'property', text: 'property', displayText: 'property (type)' });\n          snippets.push({ searchText: 'property', text: '\"\":\"property\"', displayText: 'add a property (snippet)' });\n\n          snippets.push({ searchText: 'link', text: 'link', displayText: 'link (type)' });\n          snippets.push({ searchText: 'link', text: '\"\":\"link\"', displayText: 'add a link (snippet)' });\n\n          snippets.push({ searchText: 'collection', text: 'collection', displayText: 'collection (type)' })\n          snippets.push({ searchText: 'collection', text: '\"\":\"collection\"', displayText: 'add a collection (snippet)' });\n\n          snippets.push({ searchText: 'method', text: 'method', displayText: 'method (type)' })\n          snippets.push({ searchText: 'method', text: '\"\":\"method\"', displayText: 'add a method (snippet)' });\n\n          snippets.push({ searchText: 'event', text: 'event', displayText: 'event (type)' })\n          snippets.push({ searchText: 'event', text: '\"\":\"event\"', displayText: 'add an event (snippet)' });\n\n          // schemas\n          systemId = document.location.href.split('#')[2].split('?')[0];\n          system = this.require('storage').get(systemId);\n\n          if (system) {\n            snippets.push({ searchText: '_Component', text: '_Component', displayText: '_Component (schema)' });\n\n            schemas = system.schemas;\n            for (var name in schemas) {\n              snippets.push({ searchText: schemas[name]._name, text: schemas[name]._name, displayText: schemas[name]._name + ' (schema)' });\n            }\n          }\n\n          function showAutocomplete() {\n            CodeMirror.showHint(runtime.require('editor').editor(), function () {\n              var cursor = runtime.require('editor').editor().getCursor();\n              var token = runtime.require('editor').editor().getTokenAt(cursor);\n              var start = token.start;\n              var end = cursor.ch;\n              var line = cursor.line;\n              var currentWord = token.string;\n              var list = [];\n              var cleanWord = currentWord.replace(/\"/g, '');\n\n              if (cleanWord && cleanWord.length > 1) {\n                list = snippets.filter(function (item) {\n                  return item.searchText.indexOf(cleanWord) >= 0\n                })\n              }\n\n              if (currentWord && currentWord[0] === '\"') {\n                start = start + 1;\n              }\n\n              return {\n                list: list,\n                from: CodeMirror.Pos(line, start),\n                to: CodeMirror.Pos(line, end)\n              }\n            }, { completeSingle: false })\n          }\n\n          this.editor().on('keyup', function (cm, event) {\n            if (\n              !cm.state.completionActive &&\n              event.keyCode != 13 &&\n              event.keyCode != 37 &&\n              event.keyCode != 39 &&\n              event.keyCode != 38 &&\n              event.keyCode != 40 &&\n              event.keyCode != 222 &&\n              event.keyCode != 51\n            ) {\n              showAutocomplete();\n            }\n          });\n\n          this.editor().addKeyMap({\n            'Cmd-S': function () { runtime.require('designer').save() },\n            'Ctrl-S': function () { runtime.require('designer').save() }\n          });\n\n          break;\n\n        case 'model':\n          var systemId = '',\n            modelId = '',\n            modelName = '',\n            typeName = '',\n            snippets = [],\n            types = {},\n            schemas = {};\n\n          snippets.push({ searchText: \"any\", text: \"any\", displayText: \" any (natif type)\" });\n          snippets.push({ searchText: \"string\", text: \"string\", displayText: \"string (natif type)\" });\n          snippets.push({ searchText: \"number\", text: \"number\", displayText: \"number (natif type)\" });\n          snippets.push({ searchText: \"boolean\", text: \"boolean\", displayText: \"boolean (natif type)\" });\n          snippets.push({ searchText: \"date\", text: \"date\", displayText: \"date (natif type)\" });\n          snippets.push({ searchText: \"object\", text: \"object\", displayText: \"object (natif type)\" });\n          snippets.push({ searchText: \"array\", text: \"array\", displayText: \"array (natif type)\" });\n          snippets.push({ searchText: \"json\", text: \"json\", displayText: \"json (alias)\" });\n          snippets.push({ searchText: \"html\", text: \"html\", displayText: \"html (alias)\" });\n          snippets.push({ searchText: \"css\", text: \"css\", displayText: \"css (alias)\" });\n          snippets.push({ searchText: \"text\", text: \"text\", displayText: \"text (alias)\" });\n          snippets.push({ searchText: \"javascript\", text: \"javascript\", displayText: \"javascript (alias)\" });\n\n          systemId = document.location.href.split('#')[2].split('?')[0];\n          modelId = document.location.href.split('#')[1].split('#')[0];\n          system = this.require('storage').get(systemId);\n\n          if (system) {\n            types = system.types;\n            for (typeName in types) {\n              snippets.push({ searchText: types[typeName].name, text: types[typeName].name, displayText: types[typeName].name + \" (custom type)\" });\n            }\n\n            snippets.push({ searchText: \"_Component\", text: \"_Component\", displayText: \"_Component (model)\" });\n\n            schemas = system.schemas;\n            for (var name in schemas) {\n              snippets.push({ searchText: schemas[name]._name, text: schemas[name]._name, displayText: schemas[name]._name + \" (model)\" });\n            }\n          }\n\n          // helpers\n          snippets.push({ searchText: \"dependency\", text: \"dependency\", displayText: \"dependency (kind of relationship)\" });\n          snippets.push({ searchText: \"aggregation\", text: \"aggregation\", displayText: \"aggregation (kind of relationship)\" });\n          snippets.push({ searchText: \"composition\", text: \"composition\", displayText: \"composition (kind of relationship)\" });\n          snippets.push({ searchText: \"normal\", text: \"normal\", displayText: \"normal (kind of relationship)\" });\n\n          // snippets\n          snippets.push({ searchText: 'property', text: '\"\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"any\\\",\\n\\t\\\"readOnly\\\": false,\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": \\\"\\\"\\n}\\t', displayText: 'override an inherited property (snippet)' });\n          snippets.push({ searchText: 'link', text: '\"\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"_Component\\\",\\n\\t\\\"kind\\\": \\\"normal\\\",\\n\\t\\\"readOnly\\\": false,\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": \\\"\\\"\\n}\\t', displayText: 'override an inherited link (snippet)' });\n          snippets.push({ searchText: 'collection', text: '\"\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"[_Component]\\\",\\n\\t\\\"kind\\\": \\\"normal\\\",\\n\\t\\\"readOnly\\\": false,\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": []\\n}\\t', displayText: 'override an inherited collection (snippet)' });\n          snippets.push({ searchText: 'method', text: '\"\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"params\\\": {\\n\\t\\t\\\"name\\\": \\\"param\\\",\\n\\t\\t\\\"description\\\": \\\"\\\",\\n\\t\\t\\\"type\\\": \\\"any\\\",\\n\\t\\t\\\"mandatory\\\": false,\\n\\t\\t\\\"default\\\": null\\n\\t},\\n\\t\\\"result\\\": \\\"any\\“\\n}\\t', displayText: 'override an inherited method (snippet)' });\n          snippets.push({ searchText: 'event', text: '\"\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"params\\\": {\\n\\t\\t\\\"name\\\": \\\"param\\\",\\n\\t\\t\\\"description\\\": \\\"\\\",\\n\\t\\t\\\"type\\\": \\\"any\\\",\\n\\t\\t\\\"mandatory\\\": false,\\n\\t\\t\\\"default\\\": null\\n\\t}\\n}', displayText: 'override an inherited event (snippet)' });\n          snippets.push({ searchText: 'parameter', text: '{\\n\\t\\\"name\\\": \\\"\\\",\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"any\\\",\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": null\\n}\\t', displayText: 'add a new parameter (snippet)' });\n\n          snippets.push({ searchText: 'default date', text: '1970-01-01T00:00:00.000Z', displayText: 'set a default date value (snippet)' });\n\n          function showAutocomplete() {\n            CodeMirror.showHint(runtime.require('editor').editor(), function () {\n              var cursor = runtime.require('editor').editor().getCursor();\n              var token = runtime.require('editor').editor().getTokenAt(cursor);\n              var start = token.start;\n              var end = cursor.ch;\n              var line = cursor.line;\n              var currentWord = token.string;\n              var list = [];\n              var cleanWord = currentWord.replace(/\"/g, '');\n\n              if (cleanWord && cleanWord.length > 1) {\n                list = snippets.filter(function (item) {\n                  return item.searchText.indexOf(cleanWord) >= 0\n                })\n              }\n\n              if (currentWord && currentWord[0] === '\"') {\n                start = start + 1;\n              }\n\n              return {\n                list: list,\n                from: CodeMirror.Pos(line, start),\n                to: CodeMirror.Pos(line, end)\n              }\n            }, { completeSingle: false })\n          }\n\n          this.editor().on('keyup', function (cm, event) {\n            if (\n              !cm.state.completionActive &&\n              event.keyCode != 13 &&\n              event.keyCode != 37 &&\n              event.keyCode != 39 &&\n              event.keyCode != 38 &&\n              event.keyCode != 40 &&\n              event.keyCode != 222 &&\n              event.keyCode != 51\n            ) {\n              showAutocomplete();\n            }\n          });\n\n          this.editor().addKeyMap({\n            'Cmd-S': function () { runtime.require('designer').save() },\n            'Ctrl-S': function () { runtime.require('designer').save() }\n          });\n\n          break;\n\n        case 'type':\n          var systemId = '',\n            typeName = '',\n            types = {},\n            snippets = [],\n            schemas = {};\n\n          snippets.push({ searchText: \"any\", text: \"any\", displayText: \"any (natif type)\" });\n          snippets.push({ searchText: \"string\", text: \"string\", displayText: \"string (natif type)\" });\n          snippets.push({ searchText: \"number\", text: \"number\", displayText: \"number (natif type)\" });\n          snippets.push({ searchText: \"boolean\", text: \"boolean\", displayText: \"boolean (natif type)\" });\n          snippets.push({ searchText: \"date\", text: \"date\", displayText: \"date (natif type)\" });\n          snippets.push({ searchText: \"object\", text: \"object\", displayText: \"object (natif type)\" });\n          snippets.push({ searchText: \"array\", text: \"array\", displayText: \"array (natif type)\" });\n          snippets.push({ searchText: \"json\", text: \"json\", displayText: \"json (alias)\" });\n          snippets.push({ searchText: \"html\", text: \"html\", displayText: \"html (alias)\" });\n          snippets.push({ searchText: \"css\", text: \"css\", displayText: \"css (alias)\" });\n          snippets.push({ searchText: \"text\", text: \"text\", displayText: \"text (alias)\" });\n          snippets.push({ searchText: \"javascript\", text: \"javascript\", displayText: \"javascript (alias)\" });\n\n          // snippet\n          snippets.push({ searchText: 'property', text: '\\\"\\\": {\\n\\t\\\"description\\\": \\\"\\\",\\n\\t\\\"type\\\": \\\"any\\\",\\n\\t\\\"mandatory\\\": false,\\n\\t\\\"default\\\": \\\"\\\"\\n}', displayText: \"Add a property (snippet)\" });\n\n          systemId = document.location.href.split('#')[2].split('?')[0];\n          system = this.require('storage').get(systemId);\n\n          if (system) {\n            types = system.types;\n            for (typeName in types) {\n              snippets.push({ searchText: types[typeName].name, text: types[typeName].name, displayText: types[typeName].name + \" (custom type)\" });\n            }\n\n            snippets.push({ searchText: \"_Component\", text: \"_Component\", displayText: \"_Component (model)\" });\n            schemas = system.schemas;\n            for (var name in schemas) {\n              snippets.push({ searchText: schemas[name]._name, text: schemas[name]._name, displayText: schemas[name]._name + \" (model)\" });\n            }\n          }\n\n          function showAutocomplete() {\n            CodeMirror.showHint(runtime.require('editor').editor(), function () {\n              var cursor = runtime.require('editor').editor().getCursor();\n              var token = runtime.require('editor').editor().getTokenAt(cursor);\n              var start = token.start;\n              var end = cursor.ch;\n              var line = cursor.line;\n              var currentWord = token.string;\n              var list = [];\n              var cleanWord = currentWord.replace(/\"/g, '');\n\n              if (cleanWord && cleanWord.length > 1) {\n                list = snippets.filter(function (item) {\n                  return item.searchText.indexOf(cleanWord) >= 0\n                })\n              }\n\n              if (currentWord && currentWord[0] === '\"') {\n                start = start + 1;\n              }\n\n              return {\n                list: list,\n                from: CodeMirror.Pos(line, start),\n                to: CodeMirror.Pos(line, end)\n              }\n            }, { completeSingle: false })\n          }\n\n          this.editor().on('keyup', function (cm, event) {\n            if (\n              !cm.state.completionActive &&\n              event.keyCode != 13 &&\n              event.keyCode != 37 &&\n              event.keyCode != 39 &&\n              event.keyCode != 38 &&\n              event.keyCode != 40 &&\n              event.keyCode != 222 &&\n              event.keyCode != 51\n            ) {\n              showAutocomplete();\n            }\n          });\n\n          this.editor().addKeyMap({\n            'Cmd-S': function () { runtime.require('designer').save() },\n            'Ctrl-S': function () { runtime.require('designer').save() }\n          });\n\n          break;\n\n        case 'behavior':\n          var systemId = '',\n            snippets = [],\n            behavior = {},\n            schemaName = '',\n            schemas = {},\n            schema = {},\n            parents = {},\n            i = 0;\n\n          if (this.require('state').menu() !== 'action') {\n            return;\n          }\n\n          function _searchApis(parents) {\n            var length = 0,\n              i = 0;\n\n            if (parents) {\n              length = parents.length;\n              for (i = 0; i < length; i++) {\n                if (parents[i].indexOf('_Component') !== -1) {\n                  snippets.push({ searchText: 'id', text: 'id()', displayText: 'id (inherited property)' });\n                  snippets.push({ searchText: 'require', text: 'require(\\'\\')', displayText: 'require (inherited method)' });\n                  snippets.push({ searchText: 'destroy', text: 'destroy()', displayText: 'destroy (inherited method)' });\n                  snippets.push({ searchText: 'init', text: 'init()', displayText: 'init (inherited method)' });\n                  snippets.push({ searchText: 'error', text: 'error()', displayText: 'error (inherited method)' });\n                } else {\n                  schema = _getSchema(schemas, parents[i]);\n\n                  for (var prop in schema) {\n                    if (prop.indexOf('_') !== 0) {\n                      snippets.push({ searchText: prop, text: prop + '()', displayText: prop + ' (inherited ' + schema[prop] + ')' });\n                    }\n                  }\n\n                  if (typeof schema._inherit !== 'undefined') {\n                    _searchApis(schema._inherit);\n                  }\n                }\n              }\n            }\n          }\n\n          function _getSchema(schemas, name) {\n            var result = '',\n              id = '';\n\n            for (id in schemas) {\n              if (schemas[id]._name === name) {\n                result = schemas[id];\n                break;\n              }\n            }\n            return result;\n          }\n\n          function _findSchemaName(id, components) {\n            var result = id,\n              modelName = '';\n\n            for (modelName in components) {\n              if (typeof components[modelName][id] !== 'undefined') {\n                result = modelName;\n                break;\n              }\n            }\n            return result;\n          }\n\n          id = document.location.href.split('#')[1].split('?')[0];\n          systemId = document.location.href.split('#')[2].split('?')[0];\n\n          system = this.require('storage').get(systemId);\n          \n          \n          // helper on component name\n          if (system) {\n            components = system.components;\n            for (modelName in components) {\n              for (componentId in components[modelName]) {\n                snippets.push({ searchText: componentId, text: componentId, displayText: componentId + ' (' + modelName + ')' });\n              }\n            }\n          }\n\n          if (system) {\n            schemaName = _findSchemaName(system.behaviors[id].component, this.require('factory').system().components());\n            schemas = system.schemas;\n\n            schema = _getSchema(schemas, schemaName);\n\n            for (var name in schema) {\n              if (name.indexOf('_') !== 0) {\n                snippets.push({ searchText: name, text: name + '()', displayText: name + ' (' + schema[name] + ')' });\n              }\n            }\n\n            // case of system\n            if (system.behaviors[id].component === systemId) {\n              snippets.push({ searchText: 'id', text: 'id()', displayText: 'id (inherited property)' });\n              snippets.push({ searchText: 'require', text: 'require(\\'\\')', displayText: 'require (inherited method)' });\n              snippets.push({ searchText: 'destroy', text: 'destroy()', displayText: 'destroy (inherited method)' });\n              snippets.push({ searchText: 'init', text: 'init()', displayText: 'init (inherited method)' });\n              snippets.push({ searchText: 'error', text: 'error()', displayText: 'error (inherited method)' });\n            }\n\n            // inherited\n            parents = schema._inherit;\n            if (parents) {\n              length = parents.length;\n\n              for (i = 0; i < length; i++) {\n                if (parents[i].indexOf('_Component') !== -1) {\n                  snippets.push({ searchText: 'id', text: 'id()', displayText: 'id (inherited property)' });\n                  snippets.push({ searchText: 'require', text: 'require(\\'\\')', displayText: 'require (inherited method)' });\n                  snippets.push({ searchText: 'destroy', text: 'destroy()', displayText: 'destroy (inherited method)' });\n                  snippets.push({ searchText: 'init', text: 'init()', displayText: 'init (inherited method)' });\n                  snippets.push({ searchText: 'error', text: 'error()', displayText: 'error (inherited method)' });\n                } else {\n                  schema = _getSchema(schemas, parents[i]);\n\n                  for (var prop in schema) {\n                    if (prop.indexOf('_') !== 0) {\n                      snippets.push({ searchText: prop, text: prop + '()', displayText: prop + ' (inherited ' + schema[prop] + ')' });\n                    }\n                  }\n                  if (typeof schema._inherit !== 'undefined') {\n                    _searchApis(schema._inherit);\n                  }\n                }\n              }\n            }\n          }\n\n          // snippets\n          snippets.push({ searchText: 'collections', text: 'this.require(\\'db\\').collections()', displayText: 'get a collection (snippet)' });\n          snippets.push({ searchText: 'require', text: 'this.require(\\'\\')', displayText: 'require a component (snippet)' });\n          snippets.push({ searchText: 'debug', text: 'this.require(\\'logger\\').debug(\\'\\')', displayText: 'log a debug message (snippet)' });\n          snippets.push({ searchText: 'info', text: 'this.require(\\'logger\\').info(\\'\\')', displayText: 'log an info message (snippet)' });\n          snippets.push({ searchText: 'warn', text: 'this.require(\\'logger\\').warn(\\'\\')', displayText: 'log a warning message (snippet)' });\n          snippets.push({ searchText: 'error', text: 'this.require(\\'logger\\').error(\\'\\')', displayText: 'log an error message (snippet)' });\n\n          function showAutocomplete() {\n            CodeMirror.showHint(runtime.require('editor').editor(), function () {\n              var cursor = runtime.require('editor').editor().getCursor();\n              var token = runtime.require('editor').editor().getTokenAt(cursor);\n              var start = token.start;\n              var end = cursor.ch;\n              var line = cursor.line;\n              var currentWord = token.string;\n              var list = [];\n\n              if (currentWord && currentWord.length > 1) {\n                list = snippets.filter(function (item) {\n                  return item.searchText.indexOf(currentWord) >= 0\n                })\n              }\n\n              return {\n                list: list,\n                from: CodeMirror.Pos(line, start),\n                to: CodeMirror.Pos(line, end)\n              }\n            }, { completeSingle: false })\n          }\n\n          this.editor().on('keyup', function (cm, event) {\n            if (\n              !cm.state.completionActive &&\n              event.keyCode != 13 &&\n              event.keyCode != 37 &&\n              event.keyCode != 39 &&\n              event.keyCode != 38 &&\n              event.keyCode != 40 &&\n              event.keyCode != 222 &&\n              event.keyCode != 51\n            ) {\n              showAutocomplete();\n            }\n          });\n          this.editor().addKeyMap({\n            'Cmd-S': function () { runtime.require('designer').save() },\n            'Ctrl-S': function () { runtime.require('designer').save() }\n          });\n          break;\n\n        case 'component':\n          var systemId = '',\n            system = '',\n            modelName = '',\n            componentId = '',\n            components = {},\n            snippets = [];\n\n          systemId = document.location.href.split('#')[3].split('?')[0];\n          system = this.require('storage').get(systemId);\n\n          if (system) {\n            components = system.components;\n            for (modelName in components) {\n              for (componentId in components[modelName]) {\n                snippets.push({ searchText: componentId, text: componentId, displayText: componentId + ' (' + modelName + ')' });\n              }\n            }\n          }\n\n          function showAutocomplete() {\n            CodeMirror.showHint(runtime.require('editor').editor(), function () {\n              var cursor = runtime.require('editor').editor().getCursor();\n              var token = runtime.require('editor').editor().getTokenAt(cursor);\n              var start = token.start;\n              var end = cursor.ch;\n              var line = cursor.line;\n              var currentWord = token.string;\n              var list = [];\n              var cleanWord = currentWord.replace(/\"/g, '');\n\n              if (cleanWord && cleanWord.length > 1) {\n                list = snippets.filter(function (item) {\n                  return item.searchText.indexOf(cleanWord) >= 0\n                })\n              }\n\n              if (currentWord && currentWord[0] === '\"') {\n                start = start + 1;\n              }\n\n              return {\n                list: list,\n                from: CodeMirror.Pos(line, start),\n                to: CodeMirror.Pos(line, end)\n              }\n            }, { completeSingle: false })\n          }\n\n          this.editor().on('keyup', function (cm, event) {\n            if (\n              !cm.state.completionActive &&\n              event.keyCode != 13 &&\n              event.keyCode != 37 &&\n              event.keyCode != 39 &&\n              event.keyCode != 38 &&\n              event.keyCode != 40 &&\n              event.keyCode != 222 &&\n              event.keyCode != 51\n            ) {\n              showAutocomplete();\n            }\n          });\n          this.editor().addKeyMap({\n            'Cmd-S': function () { runtime.require('designer').save() },\n            'Ctrl-S': function () { runtime.require('designer').save() }\n          });\n          break;\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "11df21f30c14808": {
      "_id": "11df21f30c14808",
      "component": "Editor",
      "state": "initValue",
      "action": "function initValue(value, lineNumber) {\n  var that = this;\n\n  switch (this.type()) {\n    case 'ace':\n      switch (this.context()) {\n        case 'system':\n        case 'schema':\n        case 'model':\n        case 'type':\n          this.editor().setValue(value);\n          this.editor().gotoLine(lineNumber);\n          this.editor().getSession().$undoManager.reset();\n          this.editor().getSession().setUndoManager(new ace.UndoManager());\n          break;\n        case 'behavior':\n          this.editor().setValue(value);\n          this.editor().gotoLine(lineNumber);\n          this.editor().getSession().$undoManager.reset();\n          this.editor().getSession().setUndoManager(new ace.UndoManager());\n\n          var Range = ace.require('ace/range').Range;\n          var endLine = value.indexOf('{') + 1;\n\n          this.editor().session.addMarker(new Range(0, 0, 0, endLine), 'readonly');\n\n          // readonly\n          this.editor().keyBinding.addKeyboardHandler({\n            handleKeyboard: function (data, hash, keyString, keyCode, event) {\n              var result = null;\n\n              switch (true) {\n                case (hash === -1 || (keyCode <= 40 && keyCode >= 37)):\n                  result = false;\n                  break;\n                case intersects(new Range(0, 0, 0, endLine)):\n                  if (event.keyCode !== 67 && event.keyCode !== 70) {\n                    result = {\n                      command: 'null',\n                      passEvent: false\n                    };\n\n                    if (event.keyCode !== 91 && event.keyCode !== 17) {\n                      runtime.require('message').warning('You can not modify the header of the behavior.');\n                    }\n                  } else {\n                    result = false;\n                  }\n                  break;\n                default:\n                  break;\n              }\n\n              if (result) {\n                return result;\n              }\n            }\n          });\n\n          function intersects(range) {\n            var result = false,\n              selection = that.editor().getSelectionRange();\n\n            result = (selection.end.row === 0 && selection.end.column < endLine + 1) && selection.intersects(range) && that.require('state').menu() === 'action';\n            return result;\n          }\n          break;\n        case 'component':\n          break;\n        default:\n          break;\n      }\n      break;\n    case 'codemirror':\n      switch (this.context()) {\n        case 'system':\n        case 'schema':\n        case 'model':\n        case 'type':\n        case 'behavior':\n        case 'component':\n          this.editor().setValue(value);\n          this.editor().setCursor({\n            line: lineNumber - 1,\n            ch: 0\n          });\n          this.editor().clearHistory();\n          break;\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "z17c861b9211fe8c": {
      "_id": "z17c861b9211fe8c",
      "component": "Editor",
      "state": "undo",
      "action": "function undo() { \n\t switch (this.type()) {\n    case 'ace':\n      this.require('editor').editor().focus();\n      this.editor().undo();\n      break;\n    case 'codemirror':\n      this.require('editor').editor().focus();\n      this.editor().undo();\n      break;\n    default:\n      break;\n\t }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "i132801925d14b80": {
      "_id": "i132801925d14b80",
      "component": "Editor",
      "state": "redo",
      "action": "function redo() { \n\t switch (this.type()) {\n    case 'ace':\n      this.require('editor').editor().focus();\n      this.editor().redo();\n      break;\n    case 'codemirror':\n      this.require('editor').editor().focus();\n      this.editor().redo();\n      break;\n    default:\n      break;\n\t }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "s1134312b151d82d": {
      "_id": "s1134312b151d82d",
      "component": "Editor",
      "state": "selectAll",
      "action": "function selectAll() {\n  switch (this.type()) {\n    case 'ace':\n      this.require('editor').editor().focus();\n      this.editor().selectAll();\n      break;\n    case 'codemirror':\n      this.require('editor').editor().focus();\n      this.require('editor').editor().setSelection({\n        line: this.require('editor').editor().firstLine(),\n        ch: 0\n      }, {\n          line: this.require('editor').editor().lastLine() + 1,\n          ch: 0\n        });\n      break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "o1b84c1595615c6f": {
      "_id": "o1b84c1595615c6f",
      "component": "Editor",
      "state": "copy",
      "action": "function copy() { \n  switch (this.type()) {\n    case 'ace':\n      this.require('editor').editor().focus();\n      document.execCommand('copy');\n      break;\n    case 'codemirror':\n      this.require('editor').editor().focus();\n      document.execCommand('copy');\n      break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "e180711f2cf19133": {
      "_id": "e180711f2cf19133",
      "component": "Editor",
      "state": "paste",
      "action": "function paste() { \n\t switch (this.type()) {\n    case 'ace':\n      this.require('editor').editor().focus();\n      if (!document.execCommand('paste', null, null)) {\n        // TODO\n      }\n      break;\n    case 'codemirror':\n      if (!document.execCommand('paste', null, null)) {\n        // TODO\n      }\n      break;\n    default:\n      break;\n\t }\n}",
      "useCoreAPI": false,
      "core": false
    }
  },
  "types": {
    "editorRuntimeType": {
      "name": "editorRuntimeType",
      "type": "string",
      "value": ["ace", "codemirror"]
    },
    "editorType": {
      "name": "editorType",
      "type": "string",
      "value": [
        "designer",
        "system",
        "type",
        "schema",
        "model",
        "behavior",
        "component"
      ]
    },
    "editorRef": { "name": "editorRef", "type": "object" }
  },
  "components": {},
  "_id": "18b661ab7219e8e"
}
