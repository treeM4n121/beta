{
  "name": "Designer-class",
  "master": false,
  "version": "1.0.0",
  "description": "",
  "schemas": {
    "o1ead8184af1a83e": {
      "_name": "Designer",
      "_inherit": ["_Component"],
      "version": "property",
      "runWindow": "property",
      "debugWindow": "property",
      "linkModel": "method",
      "save": "method",
      "saveCordova": "method",
      "saveAs": "method",
      "welcome": "method",
      "open": "method",
      "render": "event",
      "isCordova": "method",
      "isElectron": "method",
      "isMac": "method",
      "updateCordovaContext": "method",
      "runMessages": "method",
      "installExtensions": "method",
      "addShorcuts": "method",
      "_id": "o1ead8184af1a83e"
    }
  },
  "models": {
    "q129be1c61b18285": {
      "_name": "Designer",
      "version": {
        "type": "string",
        "readOnly": false,
        "mandatory": false,
        "default": "5.2.0"
      },
      "runWindow": {
        "type": "object",
        "readOnly": false,
        "mandatory": false,
        "default": null
      },
      "debugWindow": {
        "type": "object",
        "readOnly": false,
        "mandatory": false,
        "default": null
      },
      "linkModel": {
        "params": [
          {
            "name": "source",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "target",
            "type": "string",
            "mandatory": false,
            "default": ""
          }
        ]
      },
      "save": {},
      "saveCordova": {},
      "welcome": {},
      "render": {},
      "open": {
        "params": [
          {
            "name": "url",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "target",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "isExt",
            "type": "boolean",
            "mandatory": false,
            "default": false
          }
        ]
      },
      "saveAs": {
        "params": [
          {
            "name": "data",
            "type": "object",
            "mandatory": false,
            "default": {}
          },
          {
            "name": "fileName",
            "type": "string",
            "mandatory": false,
            "default": ""
          }
        ]
      },
      "isCordova": { "result": "boolean" },
      "isElectron": { "result": "boolean" },
      "runMessages": {
        "params": [
          {
            "name": "messages",
            "type": "array",
            "mandatory": true,
            "default": []
          }
        ]
      },
      "updateCordovaContext": {},
      "_id": "q129be1c61b18285",
      "installExtensions": {},
      "isMac": { "result": "boolean" },
      "addShorcuts": {}
    }
  },
  "behaviors": {
    "p13d9f1c84d121d2": {
      "_id": "p13d9f1c84d121d2",
      "component": "Designer",
      "state": "isCordova",
      "action": "function isCordova() {\n  var result = false;\n  \n  if (typeof cordova !== 'undefined') {\n    result = true;\n  }\n  return result;\n}"
    },
    "p12f03101af19689": {
      "_id": "p12f03101af19689",
      "component": "Designer",
      "state": "isElectron",
      "action": "function isElectron() {\n  var result = false;\n  var userAgent = navigator.userAgent.toLowerCase();\n  \n  if (userAgent.indexOf(' electron/') !== -1) {\n     result = true;\n  }\n  return result;\n}"
    },
    "s1472210b2419449": {
      "_id": "s1472210b2419449",
      "component": "Designer",
      "state": "open",
      "action": "function open(url, target, isExt) {\n    var ref = null,\n        that = this;\n    \n    function _getRelativePath() {\n      var result = 'index.html';\n      \n      switch (that.require('state').menu()) {\n        case 'systems':\n          if (that.require('factory').system()) {\n            result = result + '#' + that.require('factory').system().id() + '#systems#' + that.require('factory').system().name();\n          }\n          break;\n        case 'schemas':\n          if (that.require('factory').system()) {\n            result = result + '#' + that.require('factory').system().id() + '#schemas';\n            if (that.require('state').space()) {\n             result = result + '#' + that.require('state').space();\n            }\n          }\n          break;\n        case 'models':\n          if (that.require('factory').system()) {\n            result = result + '#' + that.require('factory').system().id() + '#models';\n            if (that.require('state').space()) {\n             result = result + '#' + that.require('state').space();\n            }\n          }\n          break;\n        case 'types':\n          if (that.require('factory').system()) {\n            result = result + '#' + that.require('factory').system().id() + '#types';\n            if (that.require('state').space()) {\n             result = result + '#' + that.require('state').space();\n            }\n          }\n          break;\n        case 'behaviors':\n          if (that.require('factory').system()) {\n            result = result + '#' + that.require('factory').system().id() + '#behaviors';\n            if (that.require('state').space()) {\n             result = result + '#' + that.require('state').space();\n            }\n          }\n          break;\n        case 'components':\n          if (that.require('factory').system()) {\n            result = result + '#' + that.require('factory').system().id() + '#components';\n            if (that.require('state').space()) {\n             result = result + '#' + that.require('state').space();\n            }\n          }\n          break;\n        case 'logs':\n          if (that.require('factory').system()) {\n            result = result + '#' + that.require('factory').system().id() + '#logs';\n          }\n          break;\n        default:\n          break;\n      }\n      \n      return result;\n    }\n    \n    switch(true) {\n      case this.isElectron():\n        if (isExt) {\n            ref = require('electron').shell.openExternal(url, { activate: true });  \n        } else {\n            if (target === '_self') {\n              window.location.href = url;\n            } else {\n              ref = window.open(url, target, 'nodeIntegration=true,contextIsolation=no');\n              ref.focus();\n            }\n        }\n        break;\n      case this.isCordova():\n        if (isExt) {\n          window.open(url, '_system');\n        } else { \n          if (url.indexOf('index.html') === -1 || url.indexOf('app/') !== -1) {\n            /*\n            var system = this.require('db').collections().System.find({\n                '_id': this.require('factory').system().id()\n            })[0];\n            system = JSON.parse(JSON.stringify(system));\n\n            url = url + '?system=' + encodeURIComponent(JSON.stringify(system));\n            url = url + '&ref=' + encodeURIComponent(_getRelativePath());\n            */\n            url = url + '?ref=' + encodeURIComponent(_getRelativePath());\n          }\n          document.location.href = url;\n        }\n        break;\n      default:\n        ref = window.open(url, target);\n        break;\n    }\n    \n    return ref;\n}"
    },
    "g1043310ce91f287": {
      "_id": "g1043310ce91f287",
      "component": "Designer",
      "state": "saveAs",
      "action": "function saveAs(data, fileName) {\n    var textToWrite = null,\n        textFileAsBlob = null,\n        fileNameToSaveAs = null,\n        downloadLink = null,\n        message = this.require('message');\n    \n    textToWrite = JSON.stringify(data);\n    fileNameToSaveAs = fileName;\n    \n    if (!this.isElectron()) {\n      \n      textFileAsBlob = new Blob([textToWrite], {\n          type: 'text/plain'\n      });\n      \n      if (navigator.msSaveBlob) {\n        navigator.msSaveBlob(textFileAsBlob, fileNameToSaveAs);\n      } else {\n        downloadLink = document.createElement('a');\n        downloadLink.download = fileNameToSaveAs;\n        downloadLink.innerHTML = 'Download File';\n        if (window.URL != null) {\n            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n        } else {\n            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n            downloadLink.onclick = function (event) {\n                document.body.removeChild(event.target);\n            };\n            downloadLink.style.display = 'none';\n            document.body.appendChild(downloadLink);\n        }\n    \n        downloadLink.click();\n      }\n      \n      message.success('Exportation is done.');\n    } else {\n      var {dialog} = require(\"electron\").remote;\n      var fs = require('fs');\n\n      dialog.showSaveDialog({\n          'defaultPath': '~/' + fileNameToSaveAs\n        }).then(function(ret) {\n          var savePath = ret.filePath; \n          if (savePath) {\n            fs.writeFile(savePath, textToWrite, function(err) {\n              if (err) {\n                message.danger('Exportation failed.');\n              } else {\n                message.success('Exportation is done.');\n              }\n            });\n          }\n      });\n    }\n}"
    },
    "u16f78106f713bd5": {
      "_id": "u16f78106f713bd5",
      "component": "Designer",
      "state": "updateCordovaContext",
      "action": "function updateCordovaContext() {\n  var params = {},\n      urlParams = [],\n      system = null;\n      \n  urlParams = document.location.href.split('?');\n\n  if (urlParams.length > 1) {\n      urlParams = urlParams[1].split('&');\n      urlParams.forEach(function (urlParam) {\n          var name = '',\n              value = '';\n\n          name = urlParam.split('=')[0].trim();\n          value = urlParam.split('=')[1].trim();\n\n          params[name] = decodeURIComponent(value);\n      });    \n  }\n      \n      \n  //if (params.system) {\n    //system = JSON.parse(params.system);\n    //this.require('storage').set(system._id, system);\n  //}\n  \n  if (params.ref) {\n    this.require('state').lastPage(params.ref);\n  }\n}"
    },
    "i1ae8c1cb711320e": {
      "_id": "i1ae8c1cb711320e",
      "component": "Designer",
      "state": "installExtensions",
      "action": "function installExtensions() { \n\tvar extensions = null,\n\t    numExtension = -1;\n  \n  // extensions\n  extensions = this.require('storage').get('system-designer-extensions');\n  if (extensions && extensions.extensions && extensions.extensions.length) {\n    extensions.extensions.forEach(function (extension) {\n      var Extension = this.require('Extension'),\n          system = {},\n          cleanJson = {},\n          reg = null,\n          needsUpdate = false;\n          \n      numExtension++;    \n         \n      if (extension.installed) {    \n        system = extension.source;\n        \n        try {\n          // check if we have to update the extension\n          if (this.require(extension._id) && this.require(extension._id).source().version > system.version) {\n            system = this.require(extension._id).source();\n            needsUpdate = true;\n          }\n          \n          cleanJson = JSON.stringify(system);\n          reg = new RegExp(system._id, 'g');\n          cleanJson = cleanJson.replace(reg, 'ext_' + system._id );\n          system = JSON.parse(cleanJson);\n          \n          this.require('runtime').install(system);\n          \n          new Extension(extension);\n          \n          if (needsUpdate) {\n            // save the updated system\n            extensions.extensions[numExtension].source = system;\n            this.require('storage').set('system-designer-extensions', extensions);\n            \n            this.require('message').success('Extension \\'' + system.description + '\\' has been updated.');\n          }\n        } catch (e) {\n          this.require('message').danger('Can not install an extension: ' + e.message);\n        }\n      }\n    }.bind(this));\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "j1fc6515c8f1838f": {
      "_id": "j1fc6515c8f1838f",
      "component": "Designer",
      "state": "isMac",
      "action": "function isMac() { \n\tvar result = false;\n\t\n\tif (navigator.userAgent.toLowerCase().indexOf('macintosh') !== -1) {\n\t  result = true;\n\t} \n\treturn result;\n}",
      "useCoreAPI": false,
      "core": false
    }
  },
  "types": {},
  "components": {
    "Designer": {
      "designer": {
        "_id": "designer",
        "debugWindow": null,
        "runWindow": null,
        "version": "5.2.0"
      }
    }
  },
  "_id": "f18d311c4e11fac8"
}
